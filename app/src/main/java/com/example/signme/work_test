package com.example.signme;


import android.content.res.Resources;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.SeekBar;
import android.widget.TextView;

import androidx.appcompat.app.AppCompatActivity;

import org.opencv.android.OpenCVLoader;
import org.opencv.core.Mat;
import org.opencv.videoio.VideoCapture;
import org.opencv.android.Utils;

import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;

public class Test_Video2 extends AppCompatActivity {

    private static final String TAG = "Test_Video2";

    private VideoCapture videoCapture;
    private boolean isPlaying = false;
    private Handler handler;
    private Runnable videoRunnable;
    private ImageView videoView;
    private double alpha = 1.0; // Contrast
    private double beta = 0.0;  // Brightness

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_test1);

        // Initialize OpenCV
        if (!OpenCVLoader.initDebug()) {
            Log.e(TAG, "OpenCV initialization failed");
        } else {
            Log.d(TAG, "OpenCV initialized successfully");
        }

        videoView = findViewById(R.id.videoView);
        Button playButton = findViewById(R.id.playButton);
        SeekBar contrastSeekBar = findViewById(R.id.contrastSeekBar);
        SeekBar brightnessSeekBar = findViewById(R.id.brightnessSeekBar);
        TextView contrastValue = findViewById(R.id.contrastValue);
        TextView brightnessValue = findViewById(R.id.brightnessValue);

        // Copy video from res/raw to internal storage
        String videoPath = copyVideoToInternalStorage();

        videoCapture = new VideoCapture();
        if (!videoCapture.open(videoPath)) {
            Log.e(TAG, "Cannot open video: " + videoPath);
            return;
        }

        handler = new Handler();

        // Runnable to display video frames
        videoRunnable = new Runnable() {
            @Override
            public void run() {
                Mat frame = new Mat();
                if (videoCapture.read(frame)) {
                    // Apply brightness and contrast adjustments
                    Mat adjustedFrame = new Mat();
                    frame.convertTo(adjustedFrame, -1, alpha, beta);

                    // Convert frame to Bitmap
                    android.graphics.Bitmap bitmap = android.graphics.Bitmap.createBitmap(
                            adjustedFrame.cols(), adjustedFrame.rows(), android.graphics.Bitmap.Config.ARGB_8888);
                    Utils.matToBitmap(adjustedFrame, bitmap);

                    // Display the frame
                    runOnUiThread(() -> videoView.setImageBitmap(bitmap));

                    // Schedule the next frame
                    handler.postDelayed(this, 33); // ~30fps
                } else {
                    // Stop if video ends
                    isPlaying = false;
                }
            }
        };

        // Play button listener
        playButton.setOnClickListener(v -> {
            if (!isPlaying) {
                isPlaying = true;
                handler.post(videoRunnable);
            } else {
                isPlaying = false;
                handler.removeCallbacks(videoRunnable);
            }
        });

        // Contrast adjustment listener
        contrastSeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
            @Override
            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                alpha = progress / 50.0; // Range: 0.0 to 2.0
                contrastValue.setText(String.format("Contrast: %.2f", alpha));
            }

            @Override
            public void onStartTrackingTouch(SeekBar seekBar) {
            }

            @Override
            public void onStopTrackingTouch(SeekBar seekBar) {
            }
        });

        // Brightness adjustment listener
        brightnessSeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
            @Override
            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                beta = progress - 50; // Range: -50 to +50
                brightnessValue.setText(String.format("Brightness: %.0f", beta));
            }

            @Override
            public void onStartTrackingTouch(SeekBar seekBar) {
            }

            @Override
            public void onStopTrackingTouch(SeekBar seekBar) {
            }
        });
    }

    private String copyVideoToInternalStorage() {
        try {
            // Access video from res/raw
            Resources resources = getResources();
            InputStream inputStream = resources.openRawResource(R.raw.v1);

            // Copy to internal storage
            File outputFile = new File(getFilesDir(), "v1.mp4");
            FileOutputStream outputStream = new FileOutputStream(outputFile);

            byte[] buffer = new byte[1024];
            int length;
            while ((length = inputStream.read(buffer)) > 0) {
                outputStream.write(buffer, 0, length);
            }

            outputStream.close();
            inputStream.close();

            Log.d(TAG, "Video copied to: " + outputFile.getAbsolutePath());
            return outputFile.getAbsolutePath();
        } catch (Exception e) {
            Log.e(TAG, "Error copying video: " + e.getMessage());
            return null;
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        if (videoCapture != null) {
            videoCapture.release();
        }
        if (handler != null) {
            handler.removeCallbacks(videoRunnable);
        }
    }
}


######### xml
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:padding="16dp">

    <ImageView
        android:id="@+id/videoView"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:scaleType="centerCrop" />

    <SeekBar
        android:id="@+id/contrastSeekBar"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_alignParentBottom="true"
        android:layout_marginBottom="80dp"
        android:max="100"
        android:progress="50" />

    <TextView
        android:id="@+id/contrastValue"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_above="@id/contrastSeekBar"
        android:layout_centerHorizontal="true"
        android:text="Contrast: 1.0" />

    <SeekBar
        android:id="@+id/brightnessSeekBar"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_alignParentBottom="true"
        android:layout_marginBottom="20dp"
        android:max="100"
        android:progress="50" />

    <TextView
        android:id="@+id/brightnessValue"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_above="@id/brightnessSeekBar"
        android:layout_centerHorizontal="true"
        android:text="Brightness: 0" />

    <Button
        android:id="@+id/playButton"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Play"
        android:layout_alignParentBottom="true"
        android:layout_centerHorizontal="true"
        android:layout_marginBottom="140dp"/>
</RelativeLayout>

########################
working 2

package com.example.signme;

import android.content.res.Resources;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.widget.ImageView;

import androidx.appcompat.app.AppCompatActivity;

import org.opencv.android.OpenCVLoader;
import org.opencv.core.Mat;
import org.opencv.videoio.VideoCapture;
import org.opencv.android.Utils;

import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;

public class Test_Video2 extends AppCompatActivity {

    private static final String TAG = "Test_Video2";

    private VideoCapture videoCapture;
    private boolean isPlaying = false;
    private Handler handler;
    private Runnable videoRunnable;
    private ImageView videoView;
    private final double alpha = 1.20; // Fixed contrast
    private final double beta = 20.0;  // Fixed brightness

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_test1);

        // Initialize OpenCV
        if (!OpenCVLoader.initDebug()) {
            Log.e(TAG, "OpenCV initialization failed");
        } else {
            Log.d(TAG, "OpenCV initialized successfully");
        }

        videoView = findViewById(R.id.videoView);

        // Copy video from res/raw to internal storage
        String videoPath = copyVideoToInternalStorage();

        videoCapture = new VideoCapture();
        if (!videoCapture.open(videoPath)) {
            Log.e(TAG, "Cannot open video: " + videoPath);
            return;
        }

        handler = new Handler();

        // Runnable to display video frames
        videoRunnable = new Runnable() {
            @Override
            public void run() {
                Mat frame = new Mat();
                if (videoCapture.read(frame)) {
                    // Apply brightness and contrast adjustments
                    Mat adjustedFrame = new Mat();
                    frame.convertTo(adjustedFrame, -1, alpha, beta);

                    // Convert frame to Bitmap
                    android.graphics.Bitmap bitmap = android.graphics.Bitmap.createBitmap(
                            adjustedFrame.cols(), adjustedFrame.rows(), android.graphics.Bitmap.Config.ARGB_8888);
                    Utils.matToBitmap(adjustedFrame, bitmap);

                    // Display the frame
                    runOnUiThread(() -> videoView.setImageBitmap(bitmap));

                    // Schedule the next frame
                    handler.postDelayed(this, 33); // ~30fps
                } else {
                    // Stop if video ends
                    isPlaying = false;
                }
            }
        };

        // Start playing the video immediately
        isPlaying = true;
        handler.post(videoRunnable);
    }

    private String copyVideoToInternalStorage() {
        try {
            // Access video from res/raw
            Resources resources = getResources();
            InputStream inputStream = resources.openRawResource(R.raw.v1);

            // Copy to internal storage
            File outputFile = new File(getFilesDir(), "v1.mp4");
            FileOutputStream outputStream = new FileOutputStream(outputFile);

            byte[] buffer = new byte[1024];
            int length;
            while ((length = inputStream.read(buffer)) > 0) {
                outputStream.write(buffer, 0, length);
            }

            outputStream.close();
            inputStream.close();

            Log.d(TAG, "Video copied to: " + outputFile.getAbsolutePath());
            return outputFile.getAbsolutePath();
        } catch (Exception e) {
            Log.e(TAG, "Error copying video: " + e.getMessage());
            return null;
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        if (videoCapture != null) {
            videoCapture.release();
        }
        if (handler != null) {
            handler.removeCallbacks(videoRunnable);
        }
    }
}

##################################################

package com.example.signme;

import android.content.res.Resources;
import android.graphics.Bitmap;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.Window;
import android.view.WindowManager;
import android.widget.ImageView;
import android.widget.TextView;

import androidx.appcompat.app.AppCompatActivity;

import org.json.JSONArray;
import org.json.JSONObject;
import org.opencv.android.OpenCVLoader;
import org.opencv.android.Utils;
import org.opencv.core.Mat;
import org.opencv.core.Point;
import org.opencv.core.Rect;
import org.opencv.core.Scalar;
import org.opencv.videoio.VideoCapture;

import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Map;

public class Test_Video4 extends AppCompatActivity {

    private static final String TAG = "Test_Video4";

    private VideoCapture videoCapture;
    private boolean isPlaying = false;
    private Handler handler;
    private Runnable videoRunnable;
    private ImageView videoView, signView;
    private TextView labelView;
    private final double alpha = 1.20; // Fixed contrast
    private final double beta = 20.0;  // Fixed brightness
    private Map<Integer, JSONArray> frameDetections;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
        setContentView(R.layout.activity_test1);




        // Initialize OpenCV
        if (!OpenCVLoader.initDebug()) {
            Log.e(TAG, "OpenCV initialization failed");
        } else {
            Log.d(TAG, "OpenCV initialized successfully");
        }

        videoView = findViewById(R.id.videoView1);
        signView = findViewById(R.id.sign_view);
        labelView = findViewById(R.id.label_view);

        String videoPath = copyResourceToInternalStorage(R.raw.v5, "v5.mp4");
        String jsonPath = copyResourceToInternalStorage(R.raw.detection_results, "detection_results.json");

        parseDetectionJSON(jsonPath);

        videoCapture = new VideoCapture();
        if (!videoCapture.open(videoPath)) {
            Log.e(TAG, "Cannot open video: " + videoPath);
            return;
        }

        handler = new Handler();

        videoRunnable = new Runnable() {
            int frameCount = 0;

            @Override
            public void run() {
                Mat frame = new Mat();
                if (videoCapture.read(frame)) {
                    frameCount++;

                    Mat adjustedFrame = new Mat();
                    frame.convertTo(adjustedFrame, -1, alpha, beta);

                    // Annotate frame and update views
                    annotateFrame(adjustedFrame, frameCount);

                    Bitmap bitmap = Bitmap.createBitmap(adjustedFrame.cols(), adjustedFrame.rows(), Bitmap.Config.ARGB_8888);
                    Utils.matToBitmap(adjustedFrame, bitmap);

                    runOnUiThread(() -> videoView.setImageBitmap(bitmap));

                    handler.postDelayed(this, 33); // ~30fps
                } else {
                    isPlaying = false;
                }
            }
        };

        isPlaying = true;
        handler.post(videoRunnable);
    }

    private void annotateFrame(Mat frame, int frameNumber) {
        JSONArray detections = frameDetections.get(frameNumber);
        if (detections == null) return;

        for (int i = 0; i < detections.length(); i++) {
            try {
                JSONObject detection = detections.getJSONObject(i);
                JSONArray bboxArray = detection.getJSONArray("bbox");
                String className = detection.getString("class_name");

                int xMin = bboxArray.getInt(0);
                int yMin = bboxArray.getInt(1);
                int xMax = bboxArray.getInt(2);
                int yMax = bboxArray.getInt(3);

                Rect rect = new Rect(xMin, yMin, xMax - xMin, yMax - yMin);
                org.opencv.imgproc.Imgproc.rectangle(frame, rect.tl(), rect.br(), new Scalar(0, 255, 0), 2);

                // Update sign image and label
                updateSignAndLabel(className);
            } catch (Exception e) {
                Log.e(TAG, "Error annotating frame: " + e.getMessage());
            }
        }
    }
    private void updateSignAndLabel(String className) {
        runOnUiThread(() -> {
            // Convert the detected sign name to a drawable resource name
            String drawableName = formatToDrawableName(className);

            // Load sign image dynamically
            int resId = getResources().getIdentifier(drawableName, "drawable", getPackageName());
            if (resId != 0) {
                signView.setImageResource(resId);
                labelView.setText(className);
            } else {
                //signView.setImageResource(R.drawable.default_sign); // Default sign if no match
                labelView.setText("");
            }

            // Update label text
            labelView.setText(className);
        });
    }

    private String formatToDrawableName(String className) {
        // Convert to lowercase, replace spaces with underscores, and remove special characters
        return className.toLowerCase().replace(" ", "_").replaceAll("[^a-z0-9_/]", "");
    }


    private String copyResourceToInternalStorage(int resourceId, String outputFileName) {
        try {
            Resources resources = getResources();
            InputStream inputStream = resources.openRawResource(resourceId);
            File outputFile = new File(getFilesDir(), outputFileName);
            FileOutputStream outputStream = new FileOutputStream(outputFile);

            byte[] buffer = new byte[1024];
            int length;
            while ((length = inputStream.read(buffer)) > 0) {
                outputStream.write(buffer, 0, length);
            }

            outputStream.close();
            inputStream.close();

            Log.d(TAG, "Resource copied to: " + outputFile.getAbsolutePath());
            return outputFile.getAbsolutePath();
        } catch (Exception e) {
            Log.e(TAG, "Error copying resource: " + e.getMessage());
            return null;
        }
    }

    private void parseDetectionJSON(String jsonPath) {
        frameDetections = new HashMap<>();
        try {
            File jsonFile = new File(jsonPath);
            InputStream inputStream = new java.io.FileInputStream(jsonFile);
            byte[] buffer = new byte[(int) jsonFile.length()];
            inputStream.read(buffer);
            inputStream.close();

            String jsonString = new String(buffer, "UTF-8");
            JSONArray jsonArray = new JSONArray(jsonString);

            for (int i = 0; i < jsonArray.length(); i++) {
                JSONObject frameData = jsonArray.getJSONObject(i);
                int frameNumber = frameData.getInt("frame");
                JSONArray detections = frameData.getJSONArray("detections");
                frameDetections.put(frameNumber, detections);
            }
        } catch (Exception e) {
            Log.e(TAG, "Error parsing JSON: " + e.getMessage());
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        if (videoCapture != null) {
            videoCapture.release();
        }
        if (handler != null) {
            handler.removeCallbacks(videoRunnable);
        }
    }
}

###################################################